version: "3.9"

services:
  redis:
    image: redis/redis-stack:latest
    container_name: auction-redis
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      retries: 10

  db:
    image: postgres:16
    container_name: auction-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auction-hub-db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      retries: 10

  api-dev:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: auction-api-dev
    profiles: ["dev"]
    command: sh -c "npm install && npm run start:dev"
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "300"
      PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgres://postgres:postgres@db:5432/auction-hub-db
      CLIENT_URL: http://localhost:3001
      JWT_ACCESS_SECRET: 'your_jwt_access_secret'
      JWT_REFRESH_SECRET: 'your_jwt_refresh_secret'
      JWT_ROOM_MEMBER_INVITE_TOKEN_SECRET: 'your_jwt_room_member_invite_token_secret'
      JWT_ROOM_MEMBER_TOKEN_SECRET: 'your_jwt_room_member_token_secret'
#      EMAIL_USER: ''
#      EMAIL_PASSWORD: ''
#      EMAIL_HOST: ''
#      EMAIL_PORT: ''
    ports:
      - "3000:3000"
    volumes:
      - ./server/:/usr/src/app
    depends_on:
      - db
      - redis

  api-prod:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: auction-api
    profiles: [ "prod" ]
    environment:
      NODE_ENV: production
      PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgres://postgres:postgres@db:5432/auction-hub-db
      CLIENT_URL: http://localhost:3001
      JWT_ACCESS_SECRET: 'your_jwt_access_secret'
      JWT_REFRESH_SECRET: 'your_jwt_refresh_secret'
      JWT_ROOM_MEMBER_INVITE_TOKEN_SECRET: 'your_jwt_room_member_invite_token_secret'
      JWT_ROOM_MEMBER_TOKEN_SECRET: 'your_jwt_room_member_token_secret'
      #      EMAIL_USER: ''
      #      EMAIL_PASSWORD: ''
      #      EMAIL_HOST: ''
      #      EMAIL_PORT: ''
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  migration:
    build:
      context: ./server
    container_name: auction_migration
    profiles: [ "migration" ]
    command: sh -c "npm run migration:generate"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:postgres@db:5432/auction-hub-db
    depends_on:
      - db
    volumes:
      - ./server:/usr/src/app

  client-dev:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: auction-client-dev
    profiles: [ "dev" ]
    command: sh -c "npm install && npm run dev"
    environment:
      NODE_ENV: development
      PORT: 3001
      CHOKIDAR_USEPOLLING: true
      NEXT_PUBLIC_API_WEBSOCKET_URL: http://localhost:3000/ws/room
      API_URL: http://api-dev:3000/api/v1
    ports:
      - "3001:3001"
    volumes:
      - ./client:/usr/src/app
    depends_on:
      - api-dev

  client-prod:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        API_URL: http://api-prod:3000/api/v1
    container_name: auction-client-prod
    profiles: [ "prod" ]
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_API_WEBSOCKET_URL: http://localhost:3000/ws/room
      API_URL: http://api-prod:3000/api/v1
    ports:
      - "3001:3001"
    depends_on:
      - api-prod

volumes:
  redis-data:
  pgdata:
